function [ EuroCall AmerCall EuroPut AmerPut ] =...
    CrankNicAmerPDE( S0, K, T, r, vol, Smax, M, q)
% CrankNicAmerPDE employs PDE grid to calculate  price
% of European call and put options. PlotFlag Option
% turns on plotting of option value as a function
% of time and underlying asset price
% Crank Nicolson improves convergence 
% (vs. explicit PDE) PDE but is less stable 
% compared to Implicit PDR 
% Three techniques Inversion, Matrix Left Division,  
% LU decomposition) are compared for accuracy and time
% By computational count, the LU decomposition 
% should be the fastest. 

disp ('Crank Nicolson PDE')

close all;
clc;
set(0,'defaultaxeslinewidth',2); set(0,'defaultlinelinewidth',2);
set(0,'defaultaxesFontWeight','bold');set(0,'defaulttextFontWeight','bold'); 
set(0,'defaultaxesfontsize',14); set(0,'defaulttextfontsize',14);
    
if (nargin < 8), q = 0; end
if (nargin < 7), M = 201, end
if (nargin < 6), Smax = 100; end 
if (nargin < 5), vol = 0.4; end
if (nargin < 4), r = 0.03; end
if (nargin < 3), T = 5; end
if (nargin < 2), K = 50; end
if (nargin < 1), S0 = 50; end

dS=Smax/(M-1) % equivalent to M=Smax/dS + 1 
%Smax= (M-1)*dS % S=0,dS,2*dS,...,(M-1)*dS
S=0:dS:Smax;
% simple step size calibration of
tstepApprox = dS^2/sqrt(vol)/40
Napprox = round (T/tstepApprox+1)
t = linspace(0,T,Napprox);
N = length(t)
dt = t(2)-t(1)

C = zeros(M,N); 
maxSK = (max(S-K,0))'; 
C(:,N) = maxSK; 

P = zeros(M,N);
maxKS = (max(K-S,0))'; 
P(:,N) = maxKS;  %time T expiration

j = [2:M-1]; % Stock Price Interior Nodes
jAll=[1:M]'-1; % use for S=dS*jAll
alphaCoeff = 0.25*dt*(vol^2*jAll.^2 -(r-q)*jAll);
betaCoeff = -0.5*dt*(vol^2*jAll.^2+r);
gammaCoeff = 0.25*dt*(vol^2*jAll.^2 +(r-q)*jAll);

% Same Boundary Conditions for American
iAll=[1:N]; % use for t=(iAll-1)*dt  
%tau= T-t =(N-1)*dt - (iAll-1)*dt = (N-iAll)*dt
C(1,iAll) = 0; % OTM
C(M,iAll) = Smax*exp(-q*((iAll-1)*dt))...
                -K*exp(-r*(N-iAll)*dt); %ITM
P(M,iAll) = 0; % OTM
P(1,iAll) = K*exp(-r*(N-iAll)*dt); %ITM %Smin=0
%%%%%%%
% CN technique only calculates interior nodes.
% We throw out the first and last a,b,c Coefficient
CoeffMat1=diag(-alphaCoeff(3:M-1),-1)+...
    diag(1-betaCoeff(2:M-1))+diag(-gammaCoeff(2:M-2),1);
CoeffMat2=diag(alphaCoeff(3:M-1),-1)+...
    diag(1+betaCoeff(2:M-1))+diag(gammaCoeff(2:M-2),1);
% As just mentioned, CN technique only calculates 
% interior nodes. The top interior node needs information
% from the top edge node and the bottom interior node needs
% information from the bottom edge node. Since we can't 
% extend the coeffecient matrix, the edge nodes 
% aCoeff(2) and cCoeff(M-1) have to be added in 

% Direct Calculation of American Put (P) and Call (C)
% Succesive Over Relaxation Technique is required as
% each node is repeatedly checked for early payout
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
w=0.5
Cdiff =zeros(M,1); Pdiff = zeros(M,1);
Cchange = zeros(M,1); Pchange = zeros(M,1);
Ctemp = zeros(M,1); Ptemp=zeros(M,1); 
rC=zeros(M,1); rP=zeros(M,1);
CEdge=zeros(M-2,1); PEdge=zeros(M-2,1); 
tol = 0.0001
tic
jNodes=[1:M];
for i=N-1:-1:1 
    %%%% American Call Calculation
    C(j,i)=C(j,i+1);
    CEdge(end)=(C(M,i+1))*gammaCoeff(M-1); %CEdge(1)=0; 
    rC(j)= ((CoeffMat2*C(j,i+1) + CEdge));
    CchangeNorm=1;
    counter =0;
    while ((CchangeNorm > tol) &&  (counter < 10))  
        Cdiff(j)=(1./(1-betaCoeff(j))).*...
            (rC(j) + alphaCoeff(j).*C((j-1),i)...
            - (1-betaCoeff(j)).*C(j,i)...
            + gammaCoeff(j).*C(j+1,i));
        Ctemp(j)=C(j,i)+(w.*Cdiff(j));
        C(j,i)= Ctemp(j);%max(Ctemp(j), ((j-1)'*dS-K));
        Cchange(j) = C(j,i) - Ctemp(j);
        CchangeNorm=(norm(Cchange));
        counter = counter +1;
    end
     %  [i counter CchangeNorm ]

    %%%% American Put Calculation    
    P(j,i)=P(j,i+1);
    PEdge(1)=(P(1,i+1))*alphaCoeff(2); %pEdge(end)=0;
    rP(j) = ((CoeffMat2*P(j,i+1) + PEdge));  
    PchangeNorm=1;
    counter =0;
   % while ((PchangeNorm > tol) &&  (counter < 10))  
        Pdiff(j)=(1./(1-betaCoeff(j))).*...
            (rP(j) + alphaCoeff(j).*P(j-1,i)...
            - (1-betaCoeff(j)).*P(j,i)...
            + gammaCoeff(j).*P(j+1,i) );
        Ptemp(j)=P(j,i)+(w.*Pdiff(j));
        P(j,i)=Ptemp(j);% max(Ptemp(j), (K-(j-1)'*dS));
        Pchange(j) = P(j,i) - Ptemp(j);
        PchangeNorm=(norm(Pchange));
        counter = counter +1;
   % end 
   % [i counter PchangeNorm]
end
%disp (C) %%%%%%%%%%%%%%%%%%%%%%%%%%%%

sorTime=toc;
sprintf('Direct Calculation: Time = %e', sorTime)
AmerPut = interp1 (S, P(:,1), S0); 
AmerCall = interp1 (S, C(:,1), S0);
sprintf ('American Put = %f, American Call = %f',...
    AmerPut, AmerCall)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% BROKEN
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
w=0.5
Cdiff =zeros(M,1); Pdiff = zeros(M,1);
Cchange = zeros(M,1); Pchange = zeros(M,1);
Ctemp = zeros(M,1); Ptemp=zeros(M,1); 
rC=zeros(M,1); rP=zeros(M,1);
CEdge=zeros(M-2,1); PEdge=zeros(M-2,1); 
tol = 0.0001
tic
jNodes=[1:M];
for i=N-1:-1:1 
    %%%% American Call Calculation
    C(j,i)=C(j,i+1);
    CEdge(end)=(C(M,i+1))*gammaCoeff(M-1); %CEdge(1)=0; 
    rC(j)= ((CoeffMat2*C(j,i+1) + CEdge));
    CchangeNorm=1;
    counter =0;
    while ((CchangeNorm > tol) &&  (counter < 10))  
        Cdiff(j)=(1./(1-betaCoeff(j))).*...
            (rC(j) + alphaCoeff(j).*C((j-1),i)...
            - (1-betaCoeff(j)).*C(j,i)...
            + gammaCoeff(j).*C(j+1,i));
        Ctemp(j)=C(j,i)+(w.*Cdiff(j));
        C(j,i)= Ctemp(j);%max(Ctemp(j), ((j-1)'*dS-K));
        Cchange(j) = C(j,i) - Ctemp(j);
        CchangeNorm=(norm(Cchange));
        counter = counter +1;
    end
     %  [i counter CchangeNorm ]

    %%%% American Put Calculation    
    P(j,i)=P(j,i+1);
    PEdge(1)=(P(1,i+1))*alphaCoeff(2); %pEdge(end)=0;
    rP(j) = ((CoeffMat2*P(j,i+1) + PEdge));  
    PchangeNorm=1;
    counter =0;
   % while ((PchangeNorm > tol) &&  (counter < 10))  
        Pdiff(j)=(1./(1-betaCoeff(j))).*...
            (rP(j) + alphaCoeff(j).*P(j-1,i)...
            - (1-betaCoeff(j)).*P(j,i)...
            + gammaCoeff(j).*P(j+1,i) );
        Ptemp(j)=P(j,i)+(w.*Pdiff(j));
        P(j,i)=Ptemp(j);% max(Ptemp(j), (K-(j-1)'*dS));
        Pchange(j) = P(j,i) - Ptemp(j);
        PchangeNorm=(norm(Pchange));
        counter = counter +1;
   % end 
   % [i counter PchangeNorm]
end
%disp (C) %%%%%%%%%%%%%%%%%%%%%%%%%%%%

MatrixLeftTime=toc;
sprintf('Direct Calculation: Time = %e', MatrixLeftTime)
AmerPut = interp1 (S, P(:,1), S0); 
AmerCall = interp1 (S, C(:,1), S0);
sprintf ('American Put = %f, American Call = %f',...
    AmerPut, AmerCall)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Matrix Division
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
c = zeros(M,N); c(:,N) = maxSK; 
p = zeros(M,N); p(:,N) = maxKS;  %time T expiration
c(1,iAll) = 0; % OTM
c(M,iAll) = Smax*exp(-q*((iAll-1)*dt))...
                -K*exp(-r*(N-iAll)*dt); %ITM
p(M,iAll) = 0; % OTM
p(1,iAll) = K*exp(-r*(N-iAll)*dt); %ITM %Smin=0
cEdge=zeros(M-2,1);
pEdge=zeros(M-2,1);

tic
for i=N-1:-1:1  
    cEdge(end)=(c(M,i)+c(M,i+1))*gammaCoeff(M-1); 
    % cEdge(1)=0;
    c(j,i)= (CoeffMat1 \ (CoeffMat2*c(j,i+1) + cEdge));  
    pEdge(1)=(p(1,i)+p(1,i+1))*alphaCoeff(2); 
    % pEdge(end)=0;
    p(j,i) = (CoeffMat1 \ (CoeffMat2*p(j,i+1) + pEdge));   
end
MatrixLeftTime=toc;
sprintf('Matrix Division: Time = %e', MatrixLeftTime)
EuroPut = interp1 (S, p(:,1), S0); 
EuroCall = interp1 (S, c(:,1), S0);
sprintf ('European Put = %f, European Call = %f',...
    EuroPut, EuroCall)
%disp ('c'); disp (c)
%disp ('p'); disp (p)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Matrix Division: American
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C = zeros(M,N); C(:,N) = maxSK; 
P = zeros(M,N); P(:,N) = maxKS;  %time T expiration
C(1,iAll) = 0; % OTM
C(M,iAll) = Smax*exp(-q*((iAll-1)*dt))...
                -K*exp(-r*(N-iAll)*dt); %ITM
P(M,iAll) = 0; % OTM
P(1,iAll) = K*exp(-r*(N-iAll)*dt); %ITM %Smin=0
CEdge=zeros(M-2,1);
PEdge=zeros(M-2,1);

tol=0.001;
counter =0;
PerrorNorm=1;
tic
while ((PerrorNorm > tol) &&  (counter < 10))  
    for i=N-1:-1:1  
        CEdge(end)=(C(M,i)+C(M,i+1))*gammaCoeff(M-1); 
        % cEdge(1)=0;
        C(j,i)= (CoeffMat1 \ (CoeffMat2*C(j,i+1) + CEdge));
        Cerror(i) = norm (max(C(j,i), maxSK(j))-C(j,i));
        C(:,i)= max(C(:,i), maxSK);

        PEdge(1)=(P(1,i)+P(1,i+1))*alphaCoeff(2); 
        % pEdge(end)=0;
        P(j,i) = (CoeffMat1 \ (CoeffMat2*P(j,i+1) + PEdge));   
        Perror(i)= norm(max(P(j,i), maxKS(j))-P(j,i));
        P(:,i)= max(P(:,i), maxKS);
    end
        CerrorNorm=norm(Cerror);
        PerrorNorm=norm(Perror);
        [counter CerrorNorm PerrorNorm]
        counter=counter+1;
end  

MatrixLeftTime=toc;
sprintf('Matrix Division American: Time = %e', MatrixLeftTime)
AmerPut = interp1 (S, P(:,1), S0); 
AmerCall = interp1 (S, C(:,1), S0);
sprintf ('American Put = %f, American Call = %f',...
    AmerPut, AmerCall)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Analytical Black-Scholes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tic
bsCall = BlackScholesCall (K,S0,T,vol,r,0);
bsPut = BlackScholesPut (K,S0,T,vol,r,0);
bsTime=toc;
sprintf('Analytical Black Scholes: Time = %e', bsTime)
sprintf ('European Put = %f; European Call = %f',...
    bsPut, bsCall)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Option to plot numerical soulation to PDE 
% as a function of time and underlying asset price
PlotFlag=1;
if (PlotFlag) 
    Smatrix=repmat(S',1,N);
    tmatrix=repmat(t,M,1);
    figure
    surf (Smatrix,tmatrix,C)
    shading interp
    xlabel ('Asset Price'); ylabel ('Time [Years]');
    zlabel ('Call Option Price');
    title ('Crank-Nicolson American Call') 
     
    figure
    surf (Smatrix,tmatrix,P)
    alpha(.7)
    shading interp
    title ('Crank-Nicolson American Put') 
    xlabel ('Asset Price'); ylabel ('Time [Years]');
    zlabel ('Put Option Price'); 
end
end
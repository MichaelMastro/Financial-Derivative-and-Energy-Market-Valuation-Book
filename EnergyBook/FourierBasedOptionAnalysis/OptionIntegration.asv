function [ C ] = OptionIntegration ( S0, K, r, T );
%UNTITLED1 Summary of this function goes here
%   Detailed explanation goes here
clc

if (nargin <4), T=1; end
if (nargin <3), r=0.2; end
if (nargin <2), K=80; end 
if (nargin <1), S0=100; end 
   
InPar.volBS=0.2;   volBS=InPar.volBS;
InPar.d=0;         d=InPar.d;


%%% Black-Scholes Analytical %%%
[cBS PI1BS PI2BS] = BlackScholesCall (K,S0,T,volBS,r,d);
sprintf('Black-Scholes: PI1 %g , PI2 = %g',  PI1BS, PI2BS ) 
sprintf('Black-Scholes: Call Price = %g', cBS ) 
%%% Black-Scholes Numerical %%%
Model='Gaussian'
C=S0*PI(S0,K,r,T, Model, 1, InPar)...
    -K*exp(-r*T)*PI(S0,K,r,T, Model, 2, InPar)
sprintf('Fourier Integration with %s model = %g',...
    Model, C )

%%% Merton Series %%%
[cBS PI1BS PI2BS] = BlackScholesCall (K,S0,T,volBS,r,d);
sprintf('Black-Scholes: Call Price = %g', cBS ) 

%%% Merton Numerical %%%
InPar.muJ=0.1;
InPar.volJ=0.1;
InPar.lambda=0.1;
Model='Merton'
   disp (Model)
C=S0*PI(S0,K,r,T, Model, 1, InPar)...
    -K*exp(-r*T)*PI(S0,K,r,T, Model, 2, InPar)
sprintf('Fourier Integration with %s model = %g',...
    Model, C )

end



function [ PIval ] = PI ( S0, K, r, T, Model, Number, InPar)

PIval= 0.5 + (1/pi)*quad(@IntFunction,eps,100,...
                [],[],S0,K,r,T, Model, Number, InPar );
%Bottom of intergration range is eps to avoid div by 0
sprintf('Number %g -> PiVal = %g', Number, PIval ) 
end

       

function IntVal = IntFunction (w, S0, K, r, T, Model, Number, InPar)
    if (Model == 'Gaussian')
        phi='phiGaussian';
        param.sigmaBS=InPar.volBS; 
        param.mu=r-0.5*param.sigmaBS^2; %risk-neutral
        param.T=T;
    elseif (Model == 'Merton')
        phi='phiMerton';
        param.sigmaBS=InPar.volBS; sigmaBS=param.sigmaBS;
        param.muJ=InPar.muJ;       muJ=param.muJ;
        param.sigmaJ=InPar.volJ;   sigmaJ=param.sigmaJ;
        param.lambda=InPar.lambda; lambda=param.lambda;
        %risk-neutral
        param.mu=r-0.5*sigmaBS^2-lambda*(exp(muJ+0.5*sigmaJ^2)-1); 
        param.T=T;
    else
        disp('Improper Model')
    end

    k=log(K/S0);
    if (Number == 1)
        IntVal=real(exp(-i*w*k).*feval(phi,w-i,param)...
                               ./(i.*w.*feval(phi,-i,param)));
    else % (Number == 2)
        IntVal=real(exp(-i*w*k).*feval(phi,w,param)...
                               ./(i*w));  
    end
           
end

function [ phiVal ] = phiGaussian (w,param)
    phiVal=exp(param.T.*(i.*param.mu.*w...
            -0.5*param.mu.^2 .* param.sigmaBS.^2));
end

function [ phiVal ] = phiMerton (w,param)
muJ=param.muJ;
sigmaJ=param.sigmaJ;

    phiVal=exp(param.T.*(i.*param.mu.*w...
            -0.5*param.mu.^2 .* param.sigmaBS.^2+lambda.*(exp(i*w*muJ-0.5*sigmaJ^2.*w.^2)-1)));
end

function [c PI1 PI2] = BlackScholesCall (K,S,T,vol,r,d);
    d1 = ( log(S./K)+ (r-d+vol^2/2).*T)./ (vol.*sqrt(T));
    d2 = d1-vol*sqrt(T);
    PI1 = myNormCDF(d1);
    PI2 = myNormCDF(d2);
    c = exp(-d*T).*S.*myNormCDF(d1)-exp(-r*T).*K.*myNormCDF(d2);
end

function p = BlackScholesPut (K,S,T,vol,r,d);
    d1 = ( log(S./K)+ (r-d+vol^2/2).*T)./ (vol.*sqrt(T));
    d2 = d1-vol*sqrt(T);
    p = exp(-r*T).*K.*myNormCDS(-d2)-exp(-d*T).*S.*myNormCDS(-d1);
end


function c = MertonSeriesCall (K,S,T,volBS,r,d);
lambdaBar=lambda*exp(muJ+0.5*sigmaJ^2);
c=0;
for n=1:10
    volM=sqrt(volBS^2+n*sigmaJ/T);
    rn = r - lambda*exp(muJ+0.5*sigmaJ^2-1)...
        + n*(muJ+0.5*sigmaJ^2-1)/T;
    c=c + ((lambdaBar*T)^n / factorial(n))...
        * BlackScholesCall (K,S,T,volM,rn,0);
end
c=c*exp(-lambdaBar*T);
end

